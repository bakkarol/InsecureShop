name: Dependency Scanning

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Create libs directory if it does not exist
        run: mkdir -p app/libs

      - name: Clean the build directory
        run: ./gradlew clean

      - name: Build with Gradle
        run: ./gradlew :app:build --stacktrace --info

  dependency_check:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        
      - name: Create libs directory if it does not exist
        run: mkdir -p app/libs

      - name: Run OWASP Dependency-Check
        run: ./gradlew :app:dependencyCheckAnalyze --stacktrace --info
 
      - name: List Generated Report Files
        run: ls -l ${{github.workspace}}/app/build/reports/dependency-check

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v3
        with:
          name: Dependency Check report
          path: ${{github.workspace}}/app/build/reports/dependency-check/dependency-check-report.html

  secrets_scanning:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python environment
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install truffleHog
        run: |
          pip install trufflehog
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        
      - name: Run TruffleHog for secrets scanning
        run: trufflehog --json . > trufflehog-output.json

      - name: Upload Secrets Scanning Report
        uses: actions/upload-artifact@v3
        with:
          name: Secrets Scanning Report
          path: trufflehog-output.json


# //*
# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up JDK 8
#         uses: actions/setup-java@v2
#         with:
#           distribution: 'temurin'
#           java-version: '8'
          
#       - name: Cache Gradle packages
#         uses: actions/cache@v2
#         with:
#           path: |
#             ~/.gradle/caches
#             ~/.gradle/wrapper
#           key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#           restore-keys: ${{ runner.os }}-gradle

#       - name: Grant execute permission for gradlew
#         run: chmod +x ./gradlew
        
#       - name: Create libs directory if it does not exist
#         run: mkdir -p app/libs

#       - name: Clean the build directory
#         run: ./gradlew clean

#       - name: Build with Gradle
#         run: ./gradlew :app:clean :app:build
#         # run: ./gradlew clean build --build-cache --stacktrace --info

#       - name: Run OWASP Dependency-Check
#         run: ./gradlew dependencyCheckAnalyze --stacktrace --info

#       - name: Upload Dependency Check Report
#         uses: actions/upload-artifact@master
#         with:
#            name: Dependency Check report
#            path: ${{github.workspace}}/reports
